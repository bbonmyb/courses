# "Поколение Python": курс для начинающих
# Краткий конспект

# базовые моменты 
'''

print() - вывод данных
input() - ввод данных

Форматирование строк:
f-строки: print(f"Привет, {name}")
.format(): "Привет, {}".format(name)

необязательный параметры sep и end:
print('aa','bb', sep=' ')  - изменения поведения разделения аргументов при выводе, стандартно - ' '
print('aa','bb', end=' ')  - параметр, определяющий что добавить в конце вывода, стандартно - '\n'


типы данных:
int() - integer, целые числа (десятиричная СС)
str() - string, строки
float() - числа с плавающей точкой
bool — логический (True/False)

bin() - binary, возвращает число в двоичной СС  с приставкой "0b"
oct() - octal,  возвращает число в восьмеричной СС   с приставкой "0o"
hex() - hex,    возвращает число в шестнадцатиричной СС    с приставкой "0x"




работа с числами:
+, -, *, / — стандартные арифметические
// — целочисленное деление
% — остаток
** — степень


приоритеты арифметических операторов:
1. ()	Скобки
2. **	Возведение в степень
3. - (унарный минус)	Унарный минус
4. *, /, //, %	Умножение, деление, целочисленное деление, остаток от деления
5. +, -	Сложение, вычитание




if условие:
    # блок кода
elif другое_условие:
    # блок кода
else:
    # блок кода

== (равно), != (не равно), >, <, >=, <=
and — логическое умножение
or — логическое сложение
not — логическое отрицание




(типы данных выше разобраны)

a = 25000000
a = 25_000_000

max() - максимальное число
min() - минимальное число
abs() - модуль




for переменная in последовательность:
    # действия

for i in range(3):  # от 0 до 2 включительно
    print(i)

fruits = ["apple", "banana", "cherry"]
for fruit in fruits:
    print(fruit)

range(start, stop, step) — генерирует последовательность чисел
от start до stop (не включая stop) с шагом step.


while условие:
    # действия

Выполняет блок кода, пока условие истинно.


break — завершает цикл досрочно.

continue — переходит к следующей итерации.




Строки (str)

Индексация: s — первый символ, s[-1] — последний.

Срезы: s[start:stop] — символы с позиции start до stop (не включая stop).

Методы строк:

Метод	Описание

len(a)               Возвращает кол-во символов в строке (длину)
.lower()	         Преобразует все символы строки в нижний регистр
.upper()	         Преобразует все символы строки в верхний регистр
.strip()	         Удаляет пробелы (и другие символы) с начала и конца строки
.lstrip()	         Удаляет пробелы (и другие символы) с начала строки
.rstrip()	         Удаляет пробелы (и другие символы) с конца строки
.replace(old, new)	 Заменяет все вхождения подстроки old на new
.split(sep=None)	 Разбивает строку на список по разделителю sep (по умолчанию — пробелы)
.join(iterable)	     Объединяет элементы итерируемого объекта в строку через текущую строку как разделитель
.count(sub)	         Возвращает количество вхождений подстроки sub
.find(sub)	         Возвращает индекс первого вхождения подстроки sub или -1, если не найдено
.rfind(sub)	         Возвращает индекс последнего вхождения подстроки sub или -1, если не найдено
.index(sub[, start[, end]])          Возвращает индекс первого вхождения подстроки sub, вызывает ошибку, если не найдено.
.rindex(sub[, start[, end]])         Возвращает индекс последнего вхождения подстроки sub, вызывает ошибку, если не найдено.
.capitalize()        Делает первую букву заглавной, остальные — строчными
.title()             Переводит первую букву каждого слова в верхний регистр, остальные — в нижний.
.swapcase()          Меняет регистр символов: заглавные становятся строчными, строчные — заглавными.
.isalnum()	         Проверяет, состоит ли строка из букв и цифр (True/False)
.isdigit()	         Проверяет, состоит ли строка только из цифр
.isalpha()           Проверяет, состоит ли строка только из букв
.islower()           Проверяет, что все буквы в строке в нижнем регистре.
.isupper()           Проверяет, что все буквы в строке в верхнем регистре.
.isspace()           Проверяет, что строка состоит только из пробельных символов (пробел, табуляция, перевод строки и др.).
.startswith(aaa)	 Проверяет, начинается ли строка с 'aaa'
.endswith(aaa)	     Проверяет, заканчивается ли строка на 'aaa'

Важно: методы .append(), .extend(), .insert(), .remove(), .pop(), .clear(), .sort(), .reverse() изменяют список на месте, не возвращая новый.




Функции для работы с символами

ord(char) — возвращает числовой код символа char (код Unicode).
chr(code) — возвращает символ по числовому коду code.





Сравнение строк в Python происходит посимвольно, слева направо, основываясь на порядковых значениях символов (кодах Unicode) .

Основные операторы сравнения:

== (равно): проверяет, равны ли две строки . Возвращает True, если строки идентичны, и False в противном случае .

!= (не равно): проверяет, не равны ли две строки . Возвращает True, если строки отличаются .

< (меньше), <= (меньше или равно): проверяет, идет ли одна строка раньше другой в алфавитном порядке .

> (больше), >= (больше или равно): проверяет, идет ли одна строка позже другой в алфавитном порядке .

'''

# Списки / массивы
'''
Списки в Python: основные методы
Создание списка:
lst = [1][2][3]

Добавление элементов:

append(x)              — добавить элемент x в конец списка
extend(iterable)       — добавить все элементы из iterable в конец списка
insert(i, x)           — вставить элемент x на позицию i

Удаление элементов:

del numbers[5]         — удаляем элемент, имеющий индекс 5
remove(x)              — удалить первое вхождение элемента x
pop([i])               — удалить и вернуть элемент с позиции i (если i не указан — последний)
clear()                — очистить список (удалить все элементы)

Поиск и подсчёт:

index(x)               — вернуть индекс первого вхождения x
count(x)               — количество вхождений x в списке

Изменение порядка:

sort(reverse=False)    — отсортировать список (по возрастанию по умолчанию)
reverse()              — развернуть порядок элементов в списке

Прочее:

copy()                 — создать поверхностную копию списка

Длина списка:

len(lst)               — вернуть количество элементов в списке

'''

# Функции
'''

def имя_функции(аргументы):
    действия
    return результат  # необязательно

pass - используется в функции как "заглушка", чтобы в дальнейшем продолжить функцию

'''

# Импорт модулей
'''
Подключение модуля:
import math

Импорт конкретной функции:
from math import sqrt

Импорт всех функций из модуля:
from math import *

'''

# модулю math
'''
import math

# --- Арифметика и корни ---
math.sqrt(x)          # квадратный корень из x
math.pow(x, y)        # x в степени y (возвращает float)
math.exp(x)           # e^x (экспонента)
math.log(x)           # натуральный логарифм (по осн. e)
math.log10(x)         # десятичный логарифм
math.log2(x)          # двоичный логарифм

# --- Округление и прочее ---
math.ceil(x)          # округление вверх до целого
math.floor(x)         # округление вниз до целого
math.trunc(x)         # отбросить дробную часть
math.fabs(x)          # модуль (всегда положительное float)
math.copysign(x, y)   # возвращает x с знаком y

# --- Факториал и прочие целочисленные ---
math.factorial(n)     # факториал n (целое >=0)
math.gcd(a, b)        # наибольший общий делитель
math.lcm(a, b)        # наименьшее общее кратное (с Python 3.9)

# --- Тригонометрия (радианы!) ---
math.sin(x)           # синус x (в радианах)
math.cos(x)           # косинус x (в радианах)
math.tan(x)           # тангенс x (в радианах)
math.asin(x), math.acos(x), math.atan(x)  # обратные функции

math.radians(deg)     # градусы в радианы
math.degrees(rad)     # радианы в градусы

# --- Гиперболические функции ---
math.sinh(x), math.cosh(x), math.tanh(x)
math.asinh(x), math.acosh(x), math.atanh(x)

# --- Константы ---
math.pi               # π = 3.1415...
math.e                # e = 2.718...
math.tau              # 2 * pi

# --- Проверка чисел ---
math.isfinite(x)      # не бесконечность и не NaN
math.isinf(x)         # бесконечность?
math.isnan(x)         # не число (NaN)?

# --- Прочее ---
math.hypot(x, y)      # sqrt(x*x + y*y), длина гипотенузы
math.modf(x)          # (дробная часть, целая часть) числа x
math.frexp(x)         # мантисса и экспонента x (float)

# --- Пример ---
x = 2
print(math.sqrt(x))          # 1.4142...
print(math.factorial(5))     # 120
print(math.sin(math.pi/2))   # 1.0
print(math.ceil(3.14))       # 4

# --- Итог ---
# Модуль math — основные математические операции, тригонометрия, обработка чисел и константы.
# Все функции принимают и возвращают float (кроме некоторых целочисленных, например factorial).
# Для работы с комплексными числами использовать cmath.
'''

# random
'''
Для генерации случайных чисел в Python используется модуль random:

random() — число от 0 до 1 (float).

randint(a, b) — целое число от a до b включительно.

uniform(a, b) — случайное вещественное число от a до b (включительно).

randrange(start, stop[, step]) — число из диапазона с шагом, не включая stop.

choice(seq) — случайный элемент из последовательности.

shuffle(lst) — перемешать список на месте.

sample(population, k) — k уникальных случайных элементов из последовательности.

'''




















# мини-игра "числовая угадайка"
"""
from random import *
from math import *


def guaranteed_guess(left, right):
    return ceil(log2(left + right))


def is_valid_user_number(N, x, y):
    if N.isalpha() or not (x <= int(N) <= y):
        return False
    return True


def start_numerical_guessing_game():
    print("\nВ каком бы диапазоне чисел ты хотел угадывать?")
    x = int(input(" Введи первую границу диапазона - "))
    y = int(input(" Введи вторую границу диапазона - "))
    random_number = randint(x, y)
    user_number = input(f"\nПопробуйте угадать число от {x} до {y}: ")
    k = 1
    while True:
        if not is_valid_user_number(user_number, x, y):
            print(f"А может всё-таки целок число от {x} до {y} введёшь, умник?")
            user_number = input()

        if int(user_number) < random_number:
            user_number = input("Твоё число меньше загаданного, попробуй ещё - ")
            k += 1
            continue
        elif int(user_number) > random_number:
            user_number = input("Твоё число больше загаданного, попробуй ещё - ")
            k += 1
            continue
        else:
            print(f"\nМолодец, ты угадал число с {k} раза!")
            break


print('\n    Добро пожаловать в "Числовую угадайку"!')
print("Тебе нужно будет угадать число, которое загадает программа.")
if input("Хочешь сыграть? (да/нет) - ") not in ['да','ДА','lf','LF','yes','YES']:
    print('\nтак а че ты хочешь тогда от меня не понимаю\nзахочешь играть, приходи')
else:
    while True:
        start_numerical_guessing_game()
        print('Спасибо, что сыграл в "Числовую угадайку"')
        if input('\nА может ты хочешь сыграть ещё разок? (да/нет) - ') not in ['да','ДА','lf','LF','yes','YES']:
            print('Эх, ну ладно, как решишься, возвращайся!\n  Пока-пока!')
            break
        else:
            print('Ооо... Ништяк, давай давай')
"""

# магический шар с предсказаниями
"""
from random import *

answers = ["Бесспорно", "Мне кажется - да", "Пока неясно, попробуй снова", "Даже не думай",
           "Предрешено", "Вероятнее всего", "Спроси позже", "Мой ответ - нет",
           "Никаких сомнений", "Хорошие перспективы", "Лучше не рассказывать", "По моим данным - нет",
           "Можешь быть уверен в этом", "Да", "Сконцентрируйся и спроси опять", "Весьма сомнительно"]

print('Привет Мир, я магический шар, и я знаю ответ на любой вопрос.')
name = input('Как я могу к тебе обращаться? - ')
print(f"Приветствую, {name}")
input('Какой вопрос у тебя, дитё моё? - ')
    
while True:
    print(choice(answers))
    if input('\nЕсть ли у тебя ещё вопросы? (да/нет) - ') in ['yes','lf','да']:
        input('На какой вопрос ещё я могу тебе ответить? - ')
        continue
    else:
        print(f'{name}, возвращайся, если возникнут ещё вопросы!')
        break
"""

# Генератор безопасных паролей

"""
from random import *


def is_valid_number(number):
    if number.isdigit():
        return True
    else:
        return False


def generate_password(quantity, length, chars):
    passwords = []
    pw = ''
    for i in range(quantity):
        for j in range(length):
            pw += choice(chars)
        passwords.append(pw)
        pw = ''
    return passwords




digits = "0123456789"
lowercase_letters = "abcdefghijklmnopqrstuvwxyz"
uppercase_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
punctuation = "!#$%&*+-=?@^_"

chars = ""

quantity = input("Количество паролей для генерации ? (введите число)\n")
while not is_valid_number(quantity):
    quantity = input("Неверный формат, введите натуральное число!\n")
quantity = int(quantity)

length = input("Какую хотите длину пароля ? (введите число)\n")
while not is_valid_number(length):
    length = input("Неверный формат, введите натуральное число!\n")
length = int(length)

q3 = input("Включать ли цифры 0123456789 ? (да/нет)\n")
if q3 in ["да", "ДА", "lf", "LF"]:
    chars += digits

q4 = input("Включать ли прописные буквы ABCDEFGHIJKLMNOPQRSTUVWXYZ ? (да/нет)\n")
if q4 in ["да", "ДА", "lf", "LF"]:
    chars += uppercase_letters

q5 = input("Включать ли строчные буквы abcdefghijklmnopqrstuvwxyz ? (да/нет)\n")
if q5 in ["да", "ДА", "lf", "LF"]:
    chars += lowercase_letters

q6 = input("Включать ли символы !#$%&*+-=?@^_  ? (да/нет)\n")
if q6 in ["да", "ДА", "lf", "LF"]:
    chars += punctuation

q7 = input("Исключать ли неоднозначные символы il1Lo0O ? (да/нет)\n")
if q7 in ["да", "ДА", "lf", "LF"]:
    for i in "il1Lo0O":
        chars = chars.replace(i, "")

if len(chars) == 0:
    print('ты не выбрал ни одного символа для пароля, соответственно пароля не будет)')
else:
    print(*generate_password(quantity, length, chars), sep='\n')
"""

# Шифрование/Дешифрование Цезаря

"""
def encryption_ru(step, text):
    rus_lower_alphabet = "абвгдежзийклмнопрстуфхцчшщъыьэюя"
    rus_upper_alphabet = "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ"
    res_text = ''
    for i in text:
        if i in rus_lower_alphabet:
            letter_number = rus_lower_alphabet.find(i)
            res_text += rus_lower_alphabet[(letter_number+step)%32]
        elif i in rus_upper_alphabet:
            letter_number = rus_upper_alphabet.find(i)
            res_text += rus_upper_alphabet[(letter_number+step)%32]
        else:
            res_text += i
    return res_text


def decryption_ru(step, text):
    rus_lower_alphabet = "абвгдежзийклмнопрстуфхцчшщъыьэюя"
    rus_upper_alphabet = "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ"
    res_text = ''
    for i in text:
        if i in rus_lower_alphabet:
            letter_number = rus_lower_alphabet.find(i)
            res_text += rus_lower_alphabet[(letter_number+(32-step))%32]
        elif i in rus_upper_alphabet:
            letter_number = rus_upper_alphabet.find(i)
            res_text += rus_upper_alphabet[(letter_number+(32-step))%32]
        else:
            res_text += i
    return res_text


def encryption_en(step, text):
    en_lower_alphabet = 'abcdefghijklmnopqrstuvwxyz'
    en_upper_alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    res_text = ''
    for i in text:
        if i in en_lower_alphabet:
            letter_number = en_lower_alphabet.find(i)
            res_text += en_lower_alphabet[(letter_number+step)%26]
        elif i in en_upper_alphabet:
            letter_number = en_upper_alphabet.find(i)
            res_text += en_upper_alphabet[(letter_number+step)%26]
        else:
            res_text += i
    return res_text


def decryption_en(step, text):
    en_lower_alphabet = 'abcdefghijklmnopqrstuvwxyz'
    en_upper_alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    res_text = ''
    for i in text:
        if i in en_lower_alphabet:
            letter_number = en_lower_alphabet.find(i)
            res_text += en_lower_alphabet[(letter_number+(26-step))%26]
        elif i in en_upper_alphabet:
            letter_number = en_upper_alphabet.find(i)
            res_text += en_upper_alphabet[(letter_number+(26-step))%26]
        else:
            res_text += i
    return res_text




print("\nПривет, я помощник по шифрованию/дешифрованию текста по методу Цезаря.")
print(
    "Шифр Цезаря - это вид шифра подстановки, в котором каждый символ в открытом тексте заменяется символом, находящимся на некотором постоянном числе позиций левее или правее него в алфавите."
)
print("В нашем случае, мы будем шифровать текст с шагом вправо.\n")

direction = input("Для начала напиши мне что именно тебя интересует? (шифр/дешифр)\n")
while direction not in ["шифр", "дешифр"]:
    direction = input("мне нужен чёткий ответ - шифр/дешифр\n")

language = input("Отлично, на каком языке будет шифр? (англ/рус)\n")
while language not in ["англ", "рус"]:
    language = input("мне нужен чёткий ответ - англ/рус\n")

step = input("Принял, а какой шаг выберем? (введи натуральное число)\n")
while not step.isdigit():
    step = input(
        "мне нужен корректный ответ, введи натуральное число\nнапример: 1,2,3,4,5...\n"
    )
step = int(step)

text = input("Теперь соответственно введи текст, который хочешь зашифровать:\n")

if language == 'рус' and direction == 'шифр':
    print(encryption_ru(step, text))
elif language == 'англ' and direction == 'шифр':
    print(encryption_en(step, text))
elif language == 'рус' and direction == 'дешифр':
    print(decryption_ru(step, text))
elif language == 'англ' and direction == 'дешифр':
    print(decryption_en(step, text))

"""

# Системы счисления

"""
def translation_from_the_10th_numeral_system(number, n):
    res = ""
    eng = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    while number >= n:
        if (number % n) <= 9:
            res = str(number % n) + res
        elif (number % n) >= 10:
            res = eng[(number % n) - 10] + res
        number //= n
    if number <= 9:
        res = str(number) + res
    elif number >= 10:
        res = eng[(number) - 10] + res
    print(res)


translation_from_the_10th_numeral_system(int(input()), int(input()))

"""

# Угадайка слов

'''
from random import choice

def check_stupid(answer,word_complection,guessed_letters,guessed_words):
    flag = 0

    while flag < 3:
        flag = 0
        if answer in guessed_letters:
            answer = input('ты уже вводил эту букву, напиши другую:\n')
        elif answer in guessed_words:
            answer = input('ты уже вводил это слово, напиши другое:\n')
        else:
            flag += 1

        if len(answer) != 1 and len(answer) != len(word_complection):
            answer = input('нужно ввести или 1 русскую букву или слово целиком, повтори попытку:\n')
        else:
            flag += 1

        for i in answer:
            if i not in 'абвгдежзийклмнопрстуфхцчшщъыьэюя':
                answer = input('не понимаю тебя, введи русскую строчную букву\n')
                break
        else:
            flag +=1

    return answer 

def display_hangman(tries):
    stages = [
        """
                _______
                |     |
                |     O
                |    \\|/
                |     |
                |    / \\
                |
                |  ПИЗДЕЦ!
                
                """,
        """
                _______
                |     |
                |     O
                |    \\|/
                |     |
                |    / 
                |  
                """,
        """
                _______
                |     |
                |     O
                |    \\|/
                |     |
                |    
                |  
                """,
        """
                _______
                |     |
                |     O
                |    \\|
                |     |
                |    
                |  
                """,
        """
                _______
                |     |
                |     O
                |     |
                |     |
                |     
                |  
                """,
        """
                _______
                |     |
                |     O
                |    
                |     
                |    
                |  
                """,
        """
                _______
                |     |
                |     
                |    
                |       
                |  
                """,
    ]
    print(stages[tries])

word_list = [
    "человек",
    "работа",
    "вопрос",
    "сторона",
    "страна",
    "случай",
    "голова",
    "ребенок",
    "система",
    "отношение",
    "женщина",
    "деньги",
    "машина",
    "проблема",
    "решение",
    "история",
    "власть",
    "тысяча",
    "возможность",
    "результат",
    "область",
    "статья",
    "компания",
    "группа",
    "развитие",
    "процесс",
    "условие",
    "средство",
    "начало",
    "уровень",
    "минута",
    "качество",
    "дорога",
    "действие",
    "государство",
    "любовь",
    "взгляд",
    "общество",
    "деятельность",
    "организация",
    "президент",
    "комната",
    "порядок",
    "момент",
    "письмо",
    "помощь",
    "ситуация",
    "состояние",
    "квартира",
    "внимание",
    "смерть",
    "программа",
    "задача",
    "предприятие",
    "разговор",
    "правительство",
    "производство",
    "информация",
    "положение",
    "интерес",
    "федерация",
    "правило",
    "управление",
    "мужчина",
    "партия",
    "сердце",
    "движение",
    "материал",
    "неделя",
    "чувство",
    "газета",
    "причина",
    "основа",
    "товарищ",
    "культура",
    "данные",
    "мнение",
    "документ",
    "институт",
    "проект",
    "встреча",
    "директор",
    "служба",
    "судьба",
    "девушка",
    "очередь",
    "состав",
    "количество",
    "событие",
    "объект",
    "создание",
    "значение",
    "период",
    "искусство",
    "структура",
    "пример",
    "исследование",
    "гражданин",
    "начальник",
    "принцип",
    "воздух",
    "характер",
    "борьба",
    "использование",
    "размер",
    "образование",
    "мальчик",
    "представитель",
    "участие",
    "девочка",
    "политика",
    "картина",
    "доллар",
    "территория",
    "изменение",
    "направление",
    "рисунок",
    "течение",
    "церковь",
    "население",
    "большинство",
    "музыка",
    "правда",
    "свобода",
    "память",
    "команда",
    "договор",
    "дерево",
    "хозяин",
    "природа",
    "телефон",
    "позиция",
    "писатель",
    "самолет",
    "солнце",
    "спектакль",
    "способ",
    "журнал",
    "руководитель",
    "специалист",
    "оценка",
    "регион",
    "процент",
    "родитель",
    "требование",
    "основание",
    "половина",
    "анализ",
    "автомобиль",
    "экономика",
    "литература",
    "бумага",
    "степень",
    "господин",
    "надежда",
    "предмет",
    "вариант",
    "министр",
    "граница",
    "модель",
    "операция",
    "название",
    "старик",
    "миллион",
    "счастье",
    "ребята",
    "кабинет",
    "магазин",
    "пространство",
    "знание",
    "защита",
    "руководство",
    "площадь",
    "сознание",
    "возраст",
    "участник",
    "участок",
    "желание",
    "доктор",
    "председатель",
    "представление",
    "солдат",
    "художник",
    "оружие",
    "соответствие",
    "парень",
    "зрение",
    "генерал",
    "понятие",
    "строительство",
    "услуга",
    "содержание",
    "радость",
    "безопасность",
    "продукт",
    "комплекс",
    "бизнес",
    "сотрудник",
    "предложение",
    "технология",
    "реформа",
    "отсутствие",
    "собака",
    "камень",
    "будущее",
    "рассказ",
    "контроль",
    "продукция",
    "техника",
    "здание",
    "необходимость",
    "подготовка",
    "республика",
    "хозяйство",
    "бюджет",
    "деревня",
    "элемент",
    "обстоятельство",
    "победа",
    "источник",
    "звезда",
    "сестра",
    "практика",
    "проведение",
    "карман",
    "определение",
    "функция",
    "войско",
    "комиссия",
    "применение",
    "капитан",
    "работник",
    "обеспечение",
    "офицер",
    "фамилия",
    "предел",
    "выборы",
    "ученый",
    "бутылка",
    "теория",
    "разработка",
    "личность",
    "праздник",
    "влияние",
    "читатель",
    "удовольствие",
    "ответственность",
    "учитель",
    "множество",
    "особенность",
    "показатель",
    "корабль",
    "впечатление",
    "частность",
    "детство",
    "профессор",
    "прошлое",
    "командир",
    "коридор",
    "поддержка",
    "собрание",
    "болезнь",
    "клетка",
    "заявление",
    "попытка",
    "сравнение",
    "расчет",
    "депутат",
    "комитет",
    "выражение",
    "здоровье",
    "десяток",
    "глубина",
    "студент",
    "секунда",
    "скорость",
    "ошибка",
    "режиссер",
    "поверхность",
    "ощущение",
    "станция",
    "революция",
    "колено",
    "министерство",
    "стекло",
    "высота",
    "бабушка",
    "трубка",
    "мастер",
    "поведение",
    "столица",
    "механизм",
    "передача",
    "способность",
    "подход",
    "энергия",
    "существование",
    "исполнение",
    "сожаление",
    "заместитель",
    "ресурс",
    "рождение",
    "администрация",
    "стоимость",
    "улыбка",
    "артист",
    "фигура",
    "субъект",
    "реакция",
    "список",
    "фотография",
    "журналист",
    "нарушение",
    "заседание",
    "больница",
    "существо",
    "свойство",
    "поколение",
    "животное",
    "усилие",
    "отличие",
    "остров",
    "противник",
    "реализация",
    "страница",
    "формирование",
    "житель",
    "красота",
    "растение",
    "явление",
    "наличие",
    "одежда",
    "кресло",
    "больной",
    "университет",
    "традиция",
    "декабрь",
    "ладонь",
    "сведение",
    "цветок",
    "октябрь",
    "занятие",
    "сентябрь",
    "помещение",
    "январь",
    "зритель",
    "редакция",
    "фактор",
    "август",
    "известие",
    "зависимость",
    "охрана",
    "оборудование",
    "концерт",
    "отделение",
    "расход",
    "выставка",
    "милиция",
    "переход",
    "произведение",
    "родина",
    "собственность",
    "лагерь",
    "имущество",
    "кровать",
    "аппарат",
    "середина",
    "клиент",
    "отрасль",
    "беседа",
    "законодательство",
    "продажа",
    "повышение",
    "полковник",
    "сомнение",
    "понимание",
    "апрель",
    "кодекс",
    "настроение",
    "должность",
    "преступление",
    "лестница",
    "установка",
    "появление",
    "получение",
    "образец",
    "главное",
    "костюм",
    "ценность",
    "обязанность",
    "таблица",
    "воспоминание",
    "лошадь",
    "коллега",
    "организм",
    "ученик",
    "учреждение",
    "открытие",
    "характеристика",
    "выполнение",
    "оборона",
    "выступление",
    "температура",
    "перспектива",
    "подруга",
    "приказ",
    "жертва",
    "ресторан",
    "километр",
    "признак",
    "промышленность",
    "американец",
    "заключение",
    "восток",
    "исключение",
    "постановление",
    "перевод",
    "секретарь",
    "польза",
    "звонок",
    "обстановка",
    "чиновник",
    "соглашение",
    "деталь",
    "русский",
    "тишина",
    "зарплата",
    "подарок",
    "тюрьма",
    "конкурс",
    "книжка",
    "изучение",
    "просьба",
    "публика",
    "сообщение",
    "угроза",
    "достижение",
    "назначение",
    "реклама",
    "портрет",
    "стакан",
    "творчество",
    "телевизор",
    "инструмент",
    "концепция",
    "лейтенант",
    "реальность",
    "знакомый",
    "конфликт",
    "переговоры",
    "запись",
    "площадка",
    "последствие",
    "сотрудничество",
    "зеркало",
    "академия",
    "палата",
    "потребность",
    "ноябрь",
    "увеличение",
    "поездка",
    "потеря",
    "февраль",
    "мероприятие",
    "принятие",
    "устройство",
    "вещество",
    "категория",
    "гостиница",
    "издание",
    "объединение",
    "темнота",
    "человечество",
    "колесо",
    "опасность",
    "разрешение",
    "воздействие",
    "коллектив",
    "камера",
    "следствие",
    "кандидат",
    "родственник",
    "давление",
    "присутствие",
    "взаимодействие",
    "партнер",
    "двигатель",
    "достоинство",
    "страсть",
    "испытание",
    "оплата",
    "разница",
    "водитель",
    "снижение",
    "формула",
    "капитал",
    "новость",
    "эффект",
    "губернатор",
    "доклад",
    "убийство",
    "эксперт",
    "автобус",
    "платье",
    "общение",
    "психология",
    "проверка",
    "процедура",
    "рабочий",
    "ремонт",
    "обращение",
    "обучение",
    "ожидание",
    "памятник",
    "корень",
    "наблюдение",
    "доказательство",
    "признание",
    "постель",
    "владелец",
    "компьютер",
    "инженер",
    "старуха",
    "ракета",
    "вершина",
    "выпуск",
    "торговля",
    "молодежь",
    "корпус",
    "недостаток",
    "сущность",
    "талант",
    "эффективность",
    "полоса",
    "основное",
    "рассмотрение",
    "следователь",
    "описание",
    "редактор",
    "дворец",
    "забота",
    "столик",
    "эксперимент",
    "печать",
    "кольцо",
    "пистолет",
    "воспитание",
    "начальство",
    "профессия",
    "ворота",
    "дружба",
    "окончание",
    "величина",
    "записка",
    "инициатива",
    "совесть",
    "активность",
    "кредит",
    "господь",
    "конференция",
    "потолок",
    "библиотека",
    "помощник",
    "конструкция",
    "металл",
    "молоко",
    "прокурор",
    "транспорт",
    "поэзия",
    "соединение",
    "краска",
    "расстояние",
    "подразделение",
    "сигнал",
    "атмосфера",
    "контакт",
    "сигарета",
    "восторг",
    "золото",
    "премия",
    "король",
    "подъезд",
    "автомат",
    "мальчишка",
    "чтение",
    "поселок",
    "свидетель",
    "ставка",
    "удивление",
    "поворот",
    "возвращение",
    "мгновение",
    "статус",
    "параметр",
    "сказка",
    "тенденция",
    "дыхание",
    "версия",
    "масштаб",
    "монастырь",
    "хозяйка",
    "эксплуатация",
    "коммунист",
    "пенсия",
    "приятель",
    "объяснение",
    "производитель",
    "философия",
    "мощность",
    "обязательство",
    "кризис",
    "указание",
    "яблоко",
    "препарат",
    "действительность",
    "москвич",
    "остаток",
    "изображение",
    "сделка",
    "сочинение",
    "покупатель",
    "затрата",
    "строка",
    "единица",
    "обработка",
    "чемпионат",
]

def lose(word):
    print(f"\n\nочень жаль, но ты не смог разгадать слово и проиграл...\nА слово было - {word}\n\nвозвращайся ещё и бери реванш!)")

def win():
    print('\n\nУРААА, ты угадал слово, поздравляю тебя, ты победил и не повесился)')
    print('ты просто великолепен, не знаю как ты это сделал, но ты мастер этой игры!')

def play(word):

    word_completion = list("_" * len(word))  # строка, содержащая символы _ на каждую букву задуманного слова
    
    guessed_letters = []  # список уже названных букв
    guessed_words = []  # список уже названных слова
    tries = 6  # количество попыток

    #приветствие
    print("\n\nДавайте играть в угадайку слов!")
    display_hangman(tries)
    print(f"У тебя {tries} попыток, чтобы отгадать слово.")

    print(f"{' '.join(word_completion)}   - это слово, которое тебе нужно разгадать.")
    

    #сама игра
    while True:
        #просим букву/слово
        answer = input('\nВведи букву, которая ты думаешь есть в слове, или целиком слово, если уже догадался:\n\n')
        answer = check_stupid(answer,word_completion,guessed_letters,guessed_words)

        #если это буква, тогда...
        if len(answer) == 1:
            guessed_letters += answer
            flag = False

            #проходимсся по слову, сравниваем с буквой
            for i in range(len(word)):
                #если нашли, тогда показываем эти буквы пользователю
                if word[i] == answer:
                    word_completion[i] = word[i]
                    flag = True

            if flag == True:
                print('\nМолодец,ты угадал букву!')
                print(f"{' '.join(word_completion)} - вот как выглядит слово на данный момент. (попыток - {tries})")
            elif flag == False:
                print('\nК сожалению, ты не угадал букву...')
                tries -= 1
                display_hangman(tries)
                print(f"{' '.join(word_completion)}     - вот как выглядит слово на данный момент. (попыток - {tries})")
        
        #если это слово, тогда...
        elif len(answer) == len(word):
            guessed_words += answer

            if answer == word:
                win()
                break
            else:
                print('\nК сожалению, ты не угадал слово...')
                tries -= 1
                display_hangman(tries)
                print(f"{' '.join(word_completion)} - вот как выглядит слово на данный момент. (попыток - {tries})")
        
        #проверяем попытки
        if tries == 0:
            lose(word)
            break

        if ''.join(word_completion) == word:
            win()
            break

        


again_game = 'да'
while again_game == 'да':
    word = choice(word_list).lower()
    play(word)
    again_game = input('\n\nСпасибо, что сыграли в "виселицу", хотите ли вы сыграть ещё? (да/нет)\n')
print('До скорых встреч!')

'''


